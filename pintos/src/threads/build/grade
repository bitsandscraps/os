TOTAL TESTING SCORE: 94.6%

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

SUMMARY BY TEST SET

Test Set                                      Pts Max  % Ttl  % Max
--------------------------------------------- --- --- ------ ------
tests/threads/Rubric.alarm                     18/ 18  20.0%/ 20.0%
tests/threads/Rubric.priority                  38/ 38  40.0%/ 40.0%
tests/threads/Rubric.mlfqs                     32/ 37  34.6%/ 40.0%
--------------------------------------------- --- --- ------ ------
Total                                                  94.6%/100.0%

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

SUMMARY OF INDIVIDUAL TESTS

Functionality and robustness of alarm clock (tests/threads/Rubric.alarm):
	     4/ 4 tests/threads/alarm-single
	     4/ 4 tests/threads/alarm-multiple
	     4/ 4 tests/threads/alarm-simultaneous
	     4/ 4 tests/threads/alarm-priority

	     1/ 1 tests/threads/alarm-zero
	     1/ 1 tests/threads/alarm-negative

	- Section summary.
	      6/  6 tests passed
	     18/ 18 points subtotal

Functionality of priority scheduler (tests/threads/Rubric.priority):
	     3/ 3 tests/threads/priority-change
	     3/ 3 tests/threads/priority-preempt

	     3/ 3 tests/threads/priority-fifo
	     3/ 3 tests/threads/priority-sema
	     3/ 3 tests/threads/priority-condvar

	     3/ 3 tests/threads/priority-donate-one
	     3/ 3 tests/threads/priority-donate-multiple
	     3/ 3 tests/threads/priority-donate-multiple2
	     3/ 3 tests/threads/priority-donate-nest
	     5/ 5 tests/threads/priority-donate-chain
	     3/ 3 tests/threads/priority-donate-sema
	     3/ 3 tests/threads/priority-donate-lower

	- Section summary.
	     12/ 12 tests passed
	     38/ 38 points subtotal

Functionality of advanced scheduler (tests/threads/Rubric.mlfqs):
	     5/ 5 tests/threads/mlfqs-load-1
	     5/ 5 tests/threads/mlfqs-load-60
	     3/ 3 tests/threads/mlfqs-load-avg

	     5/ 5 tests/threads/mlfqs-recent-1

	     5/ 5 tests/threads/mlfqs-fair-2
	     3/ 3 tests/threads/mlfqs-fair-20

	     4/ 4 tests/threads/mlfqs-nice-2
	     2/ 2 tests/threads/mlfqs-nice-10

	  ** 0/ 5 tests/threads/mlfqs-block

	- Section summary.
	      8/  9 tests passed
	     32/ 37 points subtotal


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/threads/mlfqs-block FAILURE:

Kernel panic in run: PANIC at ../../threads/interrupt.c:373 in intr_handler(): Unexpected interrupt
Call stack: 0xc0107f88 0xc010214d 0xc002f038 0xc01075aa 0xc01005a4 0xc0100094
Translation of call stack:
0xc0107f88: debug_panic (.../../lib/kernel/debug.c:34)
0xc010214d: intr_handler (..../threads/interrupt.c:377)
0xc002f038: (unknown)
0xc01075aa: strcmp (...ild/../../lib/string.c:84)
0xc01005a4: run_actions (.../../../threads/init.c:309)
0xc0100094: main (.../../../threads/init.c:124)

OUTPUT FROM tests/threads/mlfqs-block:

Writing command line to /tmp/BlYnBjMoB3.dsk...
warning: can't find squish-pty, so terminal input will fail
bochs -q
Kernel command line: -q -mlfqs run mlfqs-block
Pintos booting with 4,096 kB RAM...
374 pages available in kernel pool.
373 pages available in user pool.
Calibrating timer...  102,400 loops/s.
Boot complete.
Executing 'mlfqs-block':
(mlfqs-block) begin
(mlfqs-block) Main thread acquiring lock.
(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
(mlfqs-block) Block thread spinning for 20 seconds...
(mlfqs-block) Block thread acquiring lock...
(mlfqs-block) Main thread spinning for 5 seconds...
(mlfqs-block) Main thread releasing lock.
(mlfqs-block) ...got it.
(mlfqs-block) Block thread should have already acquired lock.
ÿÀ8ðÀend
Execution of 'mlfqs-block' complete.
Interrupt 0x0e (#PF Page-Fault Exception) at eip=0xc01075aa
 cr2=000009f9 error=00000000
 eax=000009f9 ebx=c010cab4 ecx=c010ddc0 edx=000009f9
 esi=c002f040 edi=c0112000 esp=c010da8a ebp=c002ff88
 cs=0008 ds=0010 es=0010 ss=7d8c
Kernel PANIC at ../../threads/interrupt.c:373 in intr_handler(): Unexpected interrupt
Call stack: 0xc0107f88 0xc010214d 0xc002f038 0xc01075aa 0xc01005a4 0xc0100094.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 3091 ticks
Thread: 486 idle ticks, 2605 kernel ticks, 0 user ticks
Console: 1317 characters output
Keyboard: 0 keys pressed
Powering off...
